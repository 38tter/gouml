
package "gouml" {
	class "Models" as gouml.Models <<E,#FFCC00>> {
		-append(obj: types.TypeName)
		+WriteTo(buf: *bytes.Buffer, ex: gouml.exists)
		-writeImplements(buf: *bytes.Buffer, depth: int)
	}
}


	gouml.Models ..> gouml.exists : <<use>> 
gouml.Models *-- gouml.model
package "gouml" {
	class "Note" as gouml.Note <<V,Orchid>> {
		+WriteTo(buf: *bytes.Buffer, depth: int)
	}
}



package "gouml" {
	class "Notes" as gouml.Notes <<V,Orchid>> {
		+WriteTo(buf: *bytes.Buffer)
	}
}


gouml.Notes *-- gouml.Note
package "gouml" {
	class "exists" as gouml.exists <<V,Orchid>>
}



package "gouml" {
	class "field" as gouml.field <<V,Orchid>> {
		-st: types.Struct
		-size(): int
		+WriteTo(buf: *bytes.Buffer, depth: int)
		-writeDiagram(buf: *bytes.Buffer, ex: gouml.exists, from: string, depth: int)
	}
}



package "gouml" {
	class "method" as gouml.method <<V,Orchid>> {
		-f: types.Func
		+WriteTo(buf: *bytes.Buffer, depth: int)
		-writeDiagram(buf: *bytes.Buffer, ex: gouml.exists, from: string, depth: int)
	}
}



package "gouml" {
	class "methods" as gouml.methods <<V,Orchid>> {
		+WriteTo(buf: *bytes.Buffer, depth: int)
		-writeDiagram(buf: *bytes.Buffer, ex: gouml.exists, from: string, depth: int)
	}
}


gouml.methods *-- gouml.method
package "gouml" {
	class "model" as gouml.model <<E,#FFCC00>> {
		-obj: types.TypeName
		-id: string
		-kind: gouml.modelKind
		-field: gouml.field
		-methods: gouml.methods
		-wrap: types.Named
		-build()
		-as(): string
		-writeClass(buf: *bytes.Buffer)
		-writeDiagram(buf: *bytes.Buffer, ex: gouml.exists)
	}
}

	gouml.model --> gouml.modelKind
	gouml.model --> gouml.field
	gouml.model --> gouml.methods


package "gouml" {
	class "modelKind" as gouml.modelKind <<V,Orchid>> {
		+Printf(name: string, alias: string): string
	}
}




note as N_gouml_modelKind
	<b>modelKind</b>

	modelKindEntity
	modelKindInterface
	modelKindValueObject
end note
N_gouml_modelKind --> gouml.modelKind
